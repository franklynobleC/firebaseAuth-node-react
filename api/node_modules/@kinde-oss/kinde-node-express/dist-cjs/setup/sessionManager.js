"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupKindeSession = void 0;
const utils_1 = require("../utils");
const express_session_1 = __importDefault(require("express-session"));
const SESSION_MAX_AGE = 1000 * 60 * 60 * 24;
const sessionConfig = {
    secret: (0, utils_1.randomString)(),
    saveUninitialized: true,
    cookie: { maxAge: SESSION_MAX_AGE },
    resave: false,
};
/**
 * Sets up @type{import('@kinde-oss/kinde-typescript-sdk').SessionManager} as an
 * as an express middleware, with the assumption that `express-session` package
 * middleware has already been configured.
 *
 * @returns {ExpressMiddleware}
 */
const getSessionManager = () => {
    return (req, _, next) => {
        req.setSessionItem = async (itemKey, itemValue) => {
            req.session[itemKey] = itemValue;
        };
        req.getSessionItem = async (itemKey) => {
            return req.session[itemKey] ?? null;
        };
        req.removeSessionItem = async (itemKey) => {
            delete req.session[itemKey];
        };
        req.destroySession = async () => {
            req.session.destroy((e) => console.log(e));
        };
        next();
    };
};
/**
 * Attaches the `express-session` middleware and the `SessionManager` for internal
 * typescript SDK (in middleware form).
 * @param {Express} app
 */
const setupKindeSession = (app) => {
    app.use((0, express_session_1.default)(sessionConfig));
    app.use(getSessionManager());
};
exports.setupKindeSession = setupKindeSession;
