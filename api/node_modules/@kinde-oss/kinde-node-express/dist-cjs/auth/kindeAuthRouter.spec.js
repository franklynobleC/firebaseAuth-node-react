"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocks_1 = require("../mocks");
const setup_1 = require("../setup");
const supertest_1 = __importDefault(require("supertest"));
describe('kindeAuthRouter', () => {
    const app = (0, mocks_1.setupKindeMock)();
    describe('handleRegister()', () => {
        const internalClient = (0, setup_1.getInternalClient)();
        const registerMock = jest.spyOn(internalClient, 'register');
        afterEach(() => {
            registerMock.mockClear();
        });
        it('redirects user to registration URL generated by internal client', async () => {
            const registerURL = (0, mocks_1.getMockAuthURL)({ start_page: 'registration' });
            registerMock.mockResolvedValue(registerURL);
            const response = await (0, supertest_1.default)(app).get('/register');
            expect(response.status).toBe(302);
            expect(response.headers.location).toBe(registerURL.toString());
        });
        it('raises exception if optional organization code is invalid', async () => {
            const query = { org_code: '' };
            const response = await (0, supertest_1.default)(app).get('/register').query(query);
            expect(response.status).toBe(400);
            expect(response.text).toContain('org_code');
            expect(response.text).toContain('invalid value');
        });
    });
    describe('handleLogin()', () => {
        const internalClient = (0, setup_1.getInternalClient)();
        const loginMock = jest.spyOn(internalClient, 'login');
        afterEach(() => {
            loginMock.mockClear();
        });
        it('redirects user to login URL generated by internal client', async () => {
            const loginURL = (0, mocks_1.getMockAuthURL)();
            loginMock.mockResolvedValue(loginURL);
            const response = await (0, supertest_1.default)(app).get('/login');
            expect(response.status).toBe(302);
            expect(response.headers.location).toBe(loginURL.toString());
        });
        it('raises exception if optional organization code is invalid', async () => {
            const query = { org_code: '' };
            const response = await (0, supertest_1.default)(app).get('/login').query(query);
            expect(response.status).toBe(400);
            expect(response.text).toContain('org_code');
            expect(response.text).toContain('invalid value');
        });
    });
    describe('handleCallback()', () => {
        const internalClient = (0, setup_1.getInternalClient)();
        const redirectToAppMock = jest.spyOn(internalClient, 'handleRedirectToApp');
        afterEach(() => {
            redirectToAppMock.mockClear();
        });
        it('redirects to siteUrl if internal client handles redirection successfully', async () => {
            redirectToAppMock.mockResolvedValue(undefined);
            const response = await (0, supertest_1.default)(app).get('/kinde_callback');
            expect(response.status).toBe(302);
            expect(redirectToAppMock).toHaveBeenCalledTimes(1);
            expect(response.headers.location).toBe(mocks_1.mockClientConfig.siteUrl);
        });
        it('redirects to unAuthorisedUrl if internal client fails to handle redirection', async () => {
            redirectToAppMock.mockRejectedValue(new Error('error'));
            const response = await (0, supertest_1.default)(app).get('/kinde_callback');
            expect(response.status).toBe(302);
            expect(response.headers.location).toBe(mocks_1.mockClientConfig.unAuthorisedUrl);
        });
    });
});
