"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthRouter = exports.validateQueryParams = exports.getRedirectRoute = void 0;
const utils_1 = require("../utils");
const setup_1 = require("../setup");
const express_1 = __importDefault(require("express"));
/**
 * Extracts the redirect route from the redirectUrl provided as part of the
 * initial client configuration.
 *
 * @returns {string}
 */
const getRedirectRoute = () => {
    const { redirectUrl } = (0, setup_1.getInitialConfig)();
    const redirectURL = new URL(redirectUrl);
    return redirectURL.pathname;
};
exports.getRedirectRoute = getRedirectRoute;
/**
 * Validates request query parameters for login, regsister and createOrg URLs.
 *
 * @param {object} requestQuery
 * @returns {Error | null}
 */
const validateQueryParams = (requestQuery) => {
    const queryParams = ['org_code'];
    for (const param of queryParams) {
        const value = requestQuery[param];
        if (value !== undefined) {
            if (!value || typeof value !== 'string') {
                const message = `Provided param '${param}' has invalid value '${value}'`;
                return new Error(message);
            }
        }
    }
    return null;
};
exports.validateQueryParams = validateQueryParams;
/**
 * Creates login URL using internal SDK and redirects to said URL.
 *
 * @param {Request} req - The Express request object.
 * @param {Response} res - The Express response object.
 * @param {NextFunction} next - The Express next function.
 * @returns {Promise<void>}
 */
const handleLogin = async (req, res, next) => {
    const error = (0, exports.validateQueryParams)(req.query);
    if (error !== null) {
        res.status(400);
        return next(error);
    }
    const client = (0, setup_1.getInternalClient)();
    const loginURL = await client.login(req, req.query);
    res.redirect(loginURL.toString());
};
/**
 * Creates register URL using internal SDK and redirects to said URL.
 *
 * @param {Request} req - The Express request object.
 * @param {Response} res - The Express response object.
 * @param {NextFunction} next - The Express next function.
 * @returns {Promise<void>}
 */
const handleRegister = async (req, res, next) => {
    const error = (0, exports.validateQueryParams)(req.query);
    if (error !== null) {
        res.status(400);
        return next(error);
    }
    const client = (0, setup_1.getInternalClient)();
    const registerURL = await client.register(req, req.query);
    res.redirect(registerURL.toString());
};
/**
 * Creates createOrg logout using internal SDK and redirects to said URL.
 *
 * @param {Request} req - The Express request object.
 * @param {Response} res - The Express response object.
 * @param {NextFunction} next - The Express next function.
 * @returns {Promise<void>}
 */
const handleLogout = async (req, res) => {
    const client = (0, setup_1.getInternalClient)();
    const logoutURL = await client.logout(req);
    res.redirect(logoutURL.toString());
};
/**
 * Handlers redirect from Kinde using internal SDK and redirects to siteURL,
 * if handling redirection fails, redirection is to unAuthorisedUrl.
 *
 * @param {Request} req - The Express request object.
 * @param {Response} res - The Express response object.
 * @returns {Promise<void>}
 */
const handleCallback = async (req, res) => {
    try {
        const { siteUrl } = (0, setup_1.getInitialConfig)();
        const client = (0, setup_1.getInternalClient)();
        const callbackURL = (0, utils_1.getRequestURL)(req);
        await client.handleRedirectToApp(req, callbackURL);
        res.redirect(siteUrl);
    }
    catch (error) {
        const { unAuthorisedUrl } = (0, setup_1.getInitialConfig)();
        res.redirect(unAuthorisedUrl);
    }
};
/**
 * Returns express Router with all the above handlers attached.
 *
 * @returns {Router}
 */
const getAuthRouter = () => {
    const redirectRoute = (0, exports.getRedirectRoute)();
    const router = express_1.default.Router();
    router.get('/login', handleLogin);
    router.get('/logout', handleLogout);
    router.get('/register', handleRegister);
    router.get(redirectRoute, handleCallback);
    return router;
};
exports.getAuthRouter = getAuthRouter;
