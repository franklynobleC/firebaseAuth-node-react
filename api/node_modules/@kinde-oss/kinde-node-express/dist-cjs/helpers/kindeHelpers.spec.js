"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocks_1 = require("../mocks");
const setup_1 = require("../setup");
const kindeHelpers_1 = require("./kindeHelpers");
const supertest_1 = __importDefault(require("supertest"));
describe('kindeHelpers', () => {
    const app = (0, mocks_1.setupKindeMock)();
    describe('createOrg()', () => {
        const internalClient = (0, setup_1.getInternalClient)();
        const handleCreateOrgMock = jest.spyOn(internalClient, 'createOrg');
        beforeAll(() => {
            app.get('/create_org', kindeHelpers_1.createOrg);
        });
        afterEach(() => {
            handleCreateOrgMock.mockClear();
        });
        it('redirects user to create organization URL generated by internal client', async () => {
            const createOrgParams = { is_create_org: true, start_page: 'registration' };
            const createOrgURL = (0, mocks_1.getMockAuthURL)(createOrgParams);
            handleCreateOrgMock.mockResolvedValue(createOrgURL);
            const response = await (0, supertest_1.default)(app).get('/create_org');
            expect(response.status).toBe(302);
            expect(response.headers.location).toBe(createOrgURL.toString());
        });
        it('raises exception if optional organization code is invalid', async () => {
            const query = { org_code: '' };
            const response = await (0, supertest_1.default)(app).get('/create_org').query(query);
            expect(response.status).toBe(400);
            expect(response.text).toContain('org_code');
            expect(response.text).toContain('invalid value');
        });
    });
});
