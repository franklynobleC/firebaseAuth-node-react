import { setupKindeMock, getMockAuthURL } from '../mocks';
import { getInternalClient } from '../setup';
import { createOrg } from './kindeHelpers';
import request from 'supertest';
describe('kindeHelpers', () => {
    const app = setupKindeMock();
    describe('createOrg()', () => {
        const internalClient = getInternalClient();
        const handleCreateOrgMock = jest.spyOn(internalClient, 'createOrg');
        beforeAll(() => {
            app.get('/create_org', createOrg);
        });
        afterEach(() => {
            handleCreateOrgMock.mockClear();
        });
        it('redirects user to create organization URL generated by internal client', async () => {
            const createOrgParams = { is_create_org: true, start_page: 'registration' };
            const createOrgURL = getMockAuthURL(createOrgParams);
            handleCreateOrgMock.mockResolvedValue(createOrgURL);
            const response = await request(app).get('/create_org');
            expect(response.status).toBe(302);
            expect(response.headers.location).toBe(createOrgURL.toString());
        });
        it('raises exception if optional organization code is invalid', async () => {
            const query = { org_code: '' };
            const response = await request(app).get('/create_org').query(query);
            expect(response.status).toBe(400);
            expect(response.text).toContain('org_code');
            expect(response.text).toContain('invalid value');
        });
    });
});
